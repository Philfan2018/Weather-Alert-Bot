# -*- coding: utf-8 -*-
"""Weather Alert Bot From Scratch

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q0dxESmmvsK2FmtRcTxvY6Azx0m6dF5j
"""

# !pip install only for when running on Jupyter Notebook
# If running as a .py file, do it in the terminal
# !pip install feedparser
import feedparser
from pprint import pprint
# !pip install gtts
# !pip install datetime
# !pip install beepy
import datetime

"""
from google.colab import drive
drive.mount('/content/drive')
TORPossibleSource = "/content/drive/MyDrive/Colab Notebooks/Alert Sounds/Tor Possible Sound.mp3"
SpecialWeatherStatementBeepSource = "/content/drive/MyDrive/Colab Notebooks/Alert Sounds/Special Weather Statement Beep.wav"
SVRWarningBeepSource = "/content/drive/MyDrive/Colab Notebooks/Alert Sounds/Severe Thunderstorm Warning Beep.wav"
PDSSVRBeepSource = "/content/drive/MyDrive/Colab Notebooks/Alert Sounds/PDS Severe T-Storm Beep.wav"
DestructiveSVRAlertSource = "/content/drive/MyDrive/Colab Notebooks/Alert Sounds/Destructive SVR Alert.wav"
SVRUpdBeepSource = "/content/drive/MyDrive/Colab Notebooks/Alert Sounds/SVR Update Beep.wav"
LSRBeepSource = "/content/drive/MyDrive/Colab Notebooks/Alert Sounds/LSR Beep.wav"
TORUpdBeepSource = "/content/drive/MyDrive/Colab Notebooks/Alert Sounds/TOR Upd Beep.wav"
"""

from IPython.display import Audio
TORPossibleBeep = Audio(TORPossibleSource, autoplay = True)
SpecialWeatherStatementBeep = Audio(SpecialWeatherStatementBeepSource, autoplay = True)
SVRWarningBeep = Audio(SVRWarningBeepSource, autoplay = True)
PDSSVRBeep = Audio(PDSSVRBeepSource, autoplay = True)
DestructiveSVRAlert = Audio(DestructiveSVRAlertSource, autoplay = True)
SVRUpdBeep = Audio(SVRUpdBeepSource, autoplay = True)
LSRBeep = Audio(LSRBeepSource, autoplay = True)
TORUpdBeep = Audio(TORUpdBeepSource, autoplay = True)

parsed = feedparser.parse('https://weather.im/iembot-rss/room/botstalk.xml')
# parsed

parsed['feed']

pprint(parsed['entries'][0])

from os import link
from re import X
from ast import Continue
from IPython.display import clear_output
from IPython.display import Audio
from gtts import gTTS
import dateutil.parser
from dateutil.parser import parse
from datetime import datetime

RSSURL = 'https://weather.im/iembot-rss/room/botstalk.xml'

TorWarnTextToSay = "A new Tornado Warning has Been Issued!"
language = "en"
gttsobject = gTTS(text = TorWarnTextToSay,
                  lang = language,
                  slow = False)
gttsobject.save("/content/NewTorWarnAudio.mp3")
NewTorWarnAudio = Audio("NewTorWarnAudio.mp3", autoplay = True)

# TorUpdTextToSay = "A Tornado Warning has been Updated!"
# gttsobject = gTTS(text = TorUpdTextToSay,
#                  lang = language,
#                  slow = False)
# gttsobject.save("/content/TorUpdAudio.mp3")
# TorWarUpdAudio = Audio("TorUpdAudio.mp3", autoplay = True)

NewTORWatchTextToSay = "A New Tornado Watch has Been Issued!"
gttsobject = gTTS(text = NewTORWatchTextToSay,
                  lang = language,
                  slow = False)
gttsobject.save("/content/NewTORWatchAudio.mp3")
NewTORWatchAudio = Audio("NewTORWatchAudio.mp3", autoplay = True)

TORWatchUpdTextToSay = "A Tornado Watch has Been Updated!"
gttsobject = gTTS(text = TORWatchUpdTextToSay,
                  lang = language,
                  slow = False)
gttsobject.save("/content/TORWatchUpdAudio.mp3")
TORWatchUpdAudio = Audio("TORWatchUpdAudio.mp3", autoplay = True)

TORWatchTrimmTextToSay = "A Tornado Watch has Been Trimmed Back!"
gttsobject = gTTS(text = TORWatchTrimmTextToSay,
                  lang = language,
                  slow = False)
gttsobject.save("/content/TORWatchTrimmAudio.mp3")
TORWatchTrimmAudio = Audio("TORWatchTrimmAudio.mp3", autoplay = True)

# NewSVRTextToSay = "A New Severe Thunderstorm Warning has been Issued!"
# gttsobject = gTTS(text = NewSVRTextToSay,
#                  lang = language,
#                  slow = False)
# gttsobject.save("/content/NewSVRAudio.mp3")
# NewSVRAudio = Audio("NewSVRAudio.mp3", autoplay = True)

# SVRUpdTextToSay = "A Severe Thunderstorm Warning has been Updated"
# gttsobject = gTTS(text = SVRUpdTextToSay,
#                  lang = language,
#                  slow = False)
# gttsobject.save("/content/SVRUpdAudio.mp3")
# SVRUpdAudio = Audio("SVRUpdAudio.mp3", autoplay = True)

# TORPossibleSVRTextToSay = "A Tornado Possible Severe Thunderstorm Warning has been Issued!"
# gttsobject = gTTS(text = TORPossibleSVRTextToSay,
#                   lang = language,
#                   slow = False)
# gttsobject.save("/content/TORPossibleSVRAudio.mp3")
# TORPossibleSVRAudio = Audio("TORPossibleSVRAudio.mp3", autoplay = True)

PDSWarningTextToSay = "A Particularly Dangerous Situation Warning is been issued!"
gttsobject = gTTS(text = PDSWarningTextToSay,
                  lang = language,
                  slow = False)
gttsobject.save("/content/PDSWarningAudio.mp3")
PDSWarningAudio = Audio("PDSWarningAudio.mp3", autoplay = True)

EmergencyWarnTextToSay = "A Damage Threat Catastrophic Warning has been issued!"
gttsobject = gTTS(text = EmergencyWarnTextToSay,
                  lang = language,
                  slow = False)
gttsobject.save("/content/CatastrophicWarnAudio.mp3")
CatastrophicWarnAudio = Audio("CatastrophicWarnAudio.mp3", autoplay = True)

NewSVRWatchTextToSay = "A New Severe Thunderstorm Watch has been Issued!"
gttsobject = gTTS(text = NewSVRWatchTextToSay,
                  lang = language,
                  slow = False)
gttsobject.save("/content/NewSVRWatchAudio.mp3")
NewSVRWatchAudio = Audio("NewSVRWatchAudio.mp3", autoplay = True)

SVRWatchUpdTextToSay = "A Severe Thunderstorm Watch has Been Updated!"
gttsobject = gTTS(text = SVRWatchUpdTextToSay,
                  lang = language,
                  slow = False)
gttsobject.save("/content/SVRWatchUpdAudio.mp3")
SVRWatchUpdAudio = Audio("SVRWatchUpdAudio.mp3", autoplay = True)

SVRTrimmTextToSay = "A Severe Thunderstorm Watch has been Trimmed back!"
gttsobject = gTTS(text = SVRTrimmTextToSay,
                  lang = language,
                  slow = False)
gttsobject.save("/content/SVRTrimmAudio.mp3")
SVRWatchTrimmAudio = Audio("SVRTrimmAudio.mp3", autoplay = True)

SPCWatchCancelTextToSay = "The SPC has Canceled a Watch!"
gttsobject = gTTS(text = SPCWatchCancelTextToSay,
                  lang = language,
                  slow = False)
gttsobject.save("/content/SPCWatchCancelAudio.mp3")
SPCWatchCancelAudio = Audio("SPCWatchCancelAudio.mp3", autoplay = True)

NewDayOneOutlookTextToSay = "New Day 1 Convective Outlook Issued!"
gttsobject = gTTS(text = NewDayOneOutlookTextToSay,
                  lang = language,
                  slow = False)
gttsobject.save("/content/NewDayOneOutlookAudio.mp3")
NewDayOneOutlookAudio = Audio("NewDayOneOutlookAudio.mp3", autoplay = True)

NewDayTwoOutlookTextToSay = "New Day 2 Convective Outlook Issued!"
gttsobject = gTTS(text = NewDayTwoOutlookTextToSay,
                  lang = language,
                  slow = False)
gttsobject.save("/content/NewDayTwoOutlookAudio.mp3")
NewDayTwoOutlookAudio = Audio("NewDayTwoOutlookAudio.mp3", autoplay = True)

NewMesoDiscTextToSay = "New Mesoscale Discussion Issued by the SPC!"
gttsobject = gTTS(text = NewMesoDiscTextToSay,
                  lang = language,
                  slow = False)
gttsobject.save("/content/NewMesoDiscAudio.mp3")
NewMesoDiscAudio = Audio("NewMesoDiscAudio.mp3", autoplay = True)


# NewStmtTextToSay = "A Special Weather Statement has been Issued"
# gttsobject = gTTS(text = NewStmtTextToSay,
#                  lang = language,
#                  slow = False)
# gttsobject.save("/content/NewStmAudio.mp3")
# NewStmAudio = Audio("NewStmAudio.mp3", autoplay = True)
# StmUpdTextToSay = "A Special Weather Statement has been Updated!"
# gttsobject = gTTS(text = StmUpdTextToSay,
#                     lang = language,
#                     slow = False)
# gttsobject.save("/content/StmUpdAudio.mp3")
# StmUpdAudio = Audio("StmUpdAudio.mp3", autoplay = True)

NewWPCDMesoDiscTextToSay = "New Mesoscale Precipitation Discussion Issued by the WPC!"
gttsobject = gTTS(text = NewWPCDMesoDiscTextToSay,
                  lang = language,
                  slow = False)
gttsobject.save("/content/NewWPCDiscAudio.mp3")
NewWPCDiscAudio = Audio("NewWPCDiscAudio.mp3", autoplay = True)

# NewLSRTextToSay = "New Local Storm Report!"
# gttsobject = gTTS(text = NewLSRTextToSay,
#                  lang = language,
#                  slow = False)
# gttsobject.save("/content/NewLSRAudio.mp3")
# NewLSRAudio = Audio("NewLSRAudio.mp3", autoplay = True)

IncludeStms = input("Include Special Weather Statements? (Yes or No) ")
IncludeSVR = input("Include Severe Thunderstorm Warnings? (Yes or No) ")
IncludeLSR = input("Include LSRs? (Yes or No) ")
IncludeDelayedLSR = input("Include Delayed LSRs? (Yes or No) ")

# Define functions to handle different types of warnings
def handleTornadoWarning(entry):
    clear_output()
    display(NewTorWarnAudio)
    print("A new Tornado Warning has been issued!")
    pprint(entry.title)
    pprint(entry.link)

def handleTornadoWarningUpdate(entry):
    clear_output()
    display(TORUpdBeep)
    print("The NWS has Updated a Tornado Warning!")
    pprint(entry.title)
    pprint(entry.link)

def handleTorandoWatch(entry):
    clear_output()
    display(NewTORWatchAudio)
    print("A New Tornado Watch has Been Issued!")
    pprint(entry.title)
    pprint(entry.link)

def handleTornadoWatchUpdate(entry):
    clear_output()
    display(TORWatchUpdAudio)
    print("A Tornado Watch has Been Updated!")
    pprint(entry.title)
    pprint(entry.link)

def handleTornadoWatchTrimmBack(entry):
    clear_output()
    display(TORWatchTrimmAudio)
    print("A Tornado Watch has been Trimmed Back!")
    pprint(entry.title)
    pprint(entry.link)

def handleSevereThunderstormWarning(entry):
    clear_output()
    display(SVRWarningBeep)
    print("A new Severe Thunderstorm Warning has been issued!")
    pprint(entry.title)
    pprint(entry.link)

def handleSevereThunderstormWarningUpdate(entry):
    clear_output()
    display(SVRUpdBeep)
    print("The NWS has Updated a Severe Thunderstorm Warning!")
    pprint(entry.title)
    pprint(entry.link)

def handlePDSSVRWarn(entry):
    clear_output()
    display(PDSSVRBeep)
    print("A PDS SVR has been issued!")
    pprint(entry.title)
    pprint(entry.link)

def handleDestructiveSVR(entry):
    clear_output()
    display(DestructiveSVRAlert)
    print("A Destructive Severe Thunderstorm Warning has Been Issued!")
    pprint(entry.title)
    pprint(entry.link)

def handleSevereThunderstormWatch(entry):
    clear_output()
    display(NewSVRWatchAudio)
    print("A New Severe Thunderstorm Watch has Been Issued!")
    pprint(entry.title)
    pprint(entry.link)

def handleSevereThunderstormWatchUpdate(entry):
    clear_output()
    display(SVRWatchUpdAudio)
    print("A Severe Thunderstorm Watch has Been Updated!")
    pprint(entry.title)
    pprint(entry.link)

def handleSevereThunderstormWatchTrimmBack(entry):
    clear_output()
    display(SVRWatchTrimmAudio)
    print("A Severe Thunderstorm Watch has Been Trimmed Back!")
    pprint(entry.title)
    pprint(entry.link)

def handleWatchCanceled(entry):
    clear_output()
    display(SPCWatchCancelAudio)
    print("SPC Has Canceled a Watch!")
    pprint(entry.title)
    pprint(entry.link)

def handleTORPossible(entry):
    clear_output()
    display(TORPossibleBeep)
    print("A Tornado Possible Severe Thunderstorm Warning has been Issued!")
    pprint(entry.title)
    pprint(entry.link)

def handlePDSWarn(entry):
    clear_output()
    display(PDSWarningAudio)
    print("PDS Warning Issued!")
    pprint(entry.title)
    pprint(entry.link)

def handleCatastrophicWarn(entry):
    clear_output()
    display(CatastrophicWarnAudio)
    print("A Damage Threat Catastrophic Warning has been Issued!")
    pprint(entry.title)
    pprint(entry.link)

def handleSPSThunderstorm(entry):
    clear_output()
    display(SpecialWeatherStatementBeep)
    print("New Special Weather Statement issued!")
    pprint(entry.title)
    pprint(entry.link)

def handleNewDayOneOutlook(entry):
    clear_output()
    display(NewDayOneOutlookAudio)
    print("New Day 1 Convective Outlook Issued by the SPC!")
    pprint(entry.title)
    pprint(entry.link)

def handleNewDayTwoOutlook(entry):
    clear_output()
    display(NewDayTwoOutlookAudio)
    print("New Day 2 Convective Outlook Issued by the SPC!")
    pprint(entry.title)
    pprint(entry.link)

def handleNewSPCMesoDisc(entry):
    clear_output()
    display(NewMesoDiscAudio)
    print("New Mesoscale Discussion Issued by the SPC!")
    pprint(entry.title)
    pprint(entry.link)

def handleNewWPCMesoPrecipDisc(entry):
    clear_output()
    display(NewWPCDiscAudio)
    print("New Mesoscale Precipitation Discussion Issued by the WPC!")
    pprint(entry.title)
    pprint(entry.link)

def handleLSR(entry):
    clear_output()
    display(LSRBeep)
    print("New Local Storm Report!")
    pprint(entry.title)
    pprint(entry.link)

# Initialize variables to track the most recent alert time
last_tornado_warning_time = None
last_tornadowarnupdate_time = None
last_TORWatch_time = None
last_TORWatchUpdate_time = None
last_TORWatchTrimmBack_time = None

last_severe_thunderstorm_warning_time = None
last_PDS_severe_thunderstorm_warning_time = None
last_Destructive_severe_thunderstorm_warning_time = None
last_severethunderstormwarningupdate_time = None
last_SVRWatch_time = None
last_SVRWatchUpdate_time = None
last_SVRWatchTrimmBack_time = None
last_SPCWatchCancel_time = None

last_TORPossibleWarn_time = None
last_PSDWarn_time = None
last_CatastrophicWarn_time = None

last_SPSThunderstorm_time = None

last_SPCDayOne_time = None
last_SPCDayTwo_time = None
last_SPCMesoDisc_time = None

last_WPCMesoPrecipDisc_time = None

last_LSR_time = None

import datetime

# Main loop
while True:
    # Parse RSS feed
    parsed = feedparser.parse(RSSURL)

   # Reverse the list of entries so that we process the oldest alerts first
    reversed_entries = reversed(parsed.entries)

    # Check for new alerts
    for entry in reversed_entries:
        alert_title = entry.title
        alert_time = datetime.datetime.strptime(entry.published, "%a, %d %b %Y %H:%M:%S %z")

        if 'tornado: POSSIBLE' in alert_title:
            if last_TORPossibleWarn_time is None or alert_time > last_TORPossibleWarn_time:
                handleTORPossible(entry)
                last_TORPossibleWarn_time = alert_time
        elif 'Severe Thunderstorm Warning' in alert_title and 'damage threat: CONSIDERABLE' in alert_title:
            if last_PDS_severe_thunderstorm_warning_time is None or alert_time > last_PDS_severe_thunderstorm_warning_time:
                handlePDSSVRWarn(entry)
                last_PDS_severe_thunderstorm_warning_time = alert_time
        elif 'damage threat: DESTRUCTIVE' in alert_title:
            if last_Destructive_severe_thunderstorm_warning_time is None or alert_time > last_Destructive_severe_thunderstorm_warning_time:
                handleDestructiveSVR(entry)
                last_Destructive_severe_thunderstorm_warning_time = alert_time
        elif 'damage threat: CONSIDERABLE' in alert_title:
            if last_PSDWarn_time is None or alert_time > last_PSDWarn_time:
                handlePDSWarn(entry)
                last_PSDWarn_time = alert_time
        elif 'damage threat: CATASTROPHIC' in alert_title:
            if last_CatastrophicWarn_time is None or alert_time > last_CatastrophicWarn_time:
                handleCatastrophicWarn(entry)
                last_CatastrophicWarn_time = alert_time
        elif 'issues Tornado Warning' in alert_title:
            if last_tornado_warning_time is None or alert_time > last_tornado_warning_time:
                handleTornadoWarning(entry)
                last_tornado_warning_time = alert_time
        elif 'updates Tornado Warning' in alert_title or 'continues Tornado Warning' in alert_title:
            if last_tornadowarnupdate_time is None or alert_time > last_tornadowarnupdate_time:
                handleTornadoWarningUpdate(entry)
                last_tornadowarnupdate_time = alert_time
        elif 'issues Tornado Watch' in alert_title:
            if last_TORWatch_time is None or alert_time > last_TORWatch_time:
                handleTorandoWatch(entry)
                last_TORWatch_time = alert_time
        elif 'updates Tornado Watch' in alert_title:
            if last_TORWatchUpdate_time is None or alert_time > last_TORWatchUpdate_time:
                handleTornadoWatchUpdate(entry)
                last_TORWatchUpdate_time = alert_time
        elif 'cancels Tornado Watch' in alert_title:
            if last_TORWatchTrimmBack_time is None or alert_time > last_TORWatchTrimmBack_time:
                handleTornadoWatchTrimmBack(entry)
                last_TORWatchTrimmBack_time = alert_time

        elif 'issues Severe Thunderstorm Warning' in alert_title and IncludeSVR == 'Yes':
            if last_severe_thunderstorm_warning_time is None or alert_time > last_severe_thunderstorm_warning_time:
                handleSevereThunderstormWarning(entry)
                last_severe_thunderstorm_warning_time = alert_time
        elif ('updates Severe Thunderstorm Warning' in alert_title or 'continues Severe Thunderstorm Warning' in alert_title) \
        and IncludeSVR == 'Yes':
            if last_severethunderstormwarningupdate_time is None or alert_time > last_severethunderstormwarningupdate_time:
                handleSevereThunderstormWarningUpdate(entry)
                last_severethunderstormwarningupdate_time = alert_time
        elif 'issues Severe Thunderstorm Watch' in alert_title:
            if last_SVRWatch_time is None or alert_time > last_SVRWatch_time:
                handleSevereThunderstormWatch(entry)
                last_SVRWatch_time = alert_time
        elif 'updates Severe Thunderstorm Watch' in alert_title:
            if last_SVRWatchUpdate_time is None or alert_time > last_SVRWatchUpdate_time:
                handleSevereThunderstormWatchUpdate(entry)
                last_SVRWatchUpdate_time = alert_time
        elif 'cancels Severe Thunderstorm Watch' in alert_title:
            if last_SVRWatchTrimmBack_time is None or alert_time > last_SVRWatchTrimmBack_time:
                handleSevereThunderstormWatchTrimmBack(entry)
                last_SVRWatchTrimmBack_time = alert_time
        elif 'cancels Weather Watch' in alert_title:
            if last_SPCWatchCancel_time is None or alert_time > last_SPCWatchCancel_time:
                handleWatchCanceled(entry)
                last_SPCWatchCancel_time = alert_time

        elif 'A STRONG THUNDERSTORM WILL' in alert_title and IncludeStms == 'Yes':
            if last_SPSThunderstorm_time is None or alert_time > last_SPSThunderstorm_time:
                handleSPSThunderstorm(entry)
                last_SPSThunderstorm_time = alert_time

        elif 'Day 1 Convective Outlook' in alert_title:
            if last_SPCDayOne_time is None or alert_time > last_SPCDayOne_time:
                handleNewDayOneOutlook(entry)
                last_SPCDayOne_time = alert_time
        elif 'Day 2 Convective Outlook' in alert_title:
            if last_SPCDayTwo_time is None or alert_time > last_SPCDayTwo_time:
                handleNewDayTwoOutlook(entry)
                last_SPCDayTwo_time = alert_time
        elif 'Mesoscale Discussion' in alert_title:
            if last_SPCMesoDisc_time is None or alert_time > last_SPCMesoDisc_time:
                handleNewSPCMesoDisc(entry)
                last_SPCMesoDisc_time = alert_time

        elif 'Mesoscale Precipitation Discussion' in alert_title:
            if last_WPCMesoPrecipDisc_time is None or alert_time > last_WPCMesoPrecipDisc_time:
                handleNewWPCMesoPrecipDisc(entry)
                last_WPCMesoPrecipDisc_time = alert_time

        elif 'Delayed Report' in alert_title and IncludeDelayedLSR == 'Yes':
           continue
        elif 'reports' in alert_title and IncludeLSR == 'Yes':
            if last_LSR_time is None or alert_time > last_LSR_time:
                handleLSR(entry)
                last_LSR_time = alert_time

import datetime

# Define functions to handle different types of warnings
def handleTornadoWarning(entry):
    clear_output()
    display(NewTorWarnAudio)
    print("A new Tornado Warning has been issued!")
    pprint(entry.title)
    pprint(entry.link)

def handleTornadoWarningUpdate(entry):
    clear_output()
    display(TorWarUpdAudio)
    print("The NWS has Updated a Tornado Warning!")
    pprint(entry.title)
    pprint(entry.link)

def handleTorandoWatch(entry):
    clear_output()
    display(NewTORWatchAudio)
    print("A New Tornado Watch has Been Issued!")
    pprint(Info)
    pprint(entry.title)
    pprint(entry.link)

def handleTornadoWatchUpdate(entry):
    clear_output()
    display(TORWatchUpdAudio)
    print("A Tornado Watch has Been Updated!")
    pprint(entry.title)
    pprint(entry.link)

def handleTornadoWatchTrimmBack(entry):
    clear_output()
    display(TORWatchTrimmAudio)
    print("A Tornado Watch has been Trimmed Back!")
    pprint(entry.title)
    pprint(entry.link)

def handleSevereThunderstormWarning(entry):
    clear_output()
    display(NewSVRAudio)
    print("A new Severe Thunderstorm Warning has been issued!")
    pprint(entry.title)
    pprint(entry.link)

def handleSevereThunderstormWarningUpdate(entry):
    clear_output()
    display(SVRUpdAudio)
    print("The NWS has Updated a Severe Thunderstorm Warning!")
    pprint(entry.title)
    pprint(entry.link)

def handleSevereThunderstormWatch(entry):
    clear_output()
    display(NewSVRWatchAudio)
    print("A New Severe Thunderstorm Watch has Been Issued!")
    pprint(entry.title)
    pprint(entry.link)

def handleSevereThunderstormWatchUpdate(entry):
    clear_output()
    display(SVRUpdAudio)
    print("A Severe Thunderstorm Watch has Been Updated!")
    pprint(entry.title)
    pprint(entry.link)

def handleSevereThunderstormWatchTrimmBack(entry):
    clear_output()
    display(SVRWatchTrimmAudio)
    print("A Severe Thunderstorm Watch has Been Trimmed Back!")
    pprint(entry.title)
    pprint(entry.link)

def handleWatchCanceled(entry):
    clear_output()
    display(SPCWatchCancelAudio)
    print("SPC Has Canceled a Watch!")
    pprint(entry.title)
    pprint(entry.link)

def handleNewDayOneOutlook(entry):
    clear_output()
    display(NewDayOneOutlookAudio)
    print("New Day 1 Convective Outlook Issued by the SPC!")
    pprint(entry.title)
    pprint(entry.link)

def handleNewDayTwoOutlook(entry):
    clear_output()
    display(NewDayTwoOutlookAudio)
    print("New Day 2 Convective Outlook Issued by the SPC!")
    pprint(entry.title)
    pprint(entry.link)

def handleNewSPCMesoDisc(entry):
    clear_output()
    display(NewMesoDiscAudio)
    print("New Mesoscale Discussion Issued by the SPC!")
    pprint(entry.title)
    pprint(entry.link)

def handleNewWPCMesoPrecipDisc(entry):
    clear_output()
    display(NewWPCDiscAudio)
    print("New Mesoscale Precipitation Discussion Issued by the WPC!")
    pprint(entry.title)
    pprint(entry.link)

def handleLSR(entry):
    clear_output()
    display(NewLSRAudio)
    print("New LSR!")
    pprint(entry.title)
    pprint(entry.link)

# Initialize variables to track the most recent alert time
last_tornado_warning_time = None
last_tornadowarnupdate_time = None
last_TORWatch_time = None
last_TORWatchUpdate_time = None
last_TORWatchTrimmBack_time = None

last_severe_thunderstorm_warning_time = None
last_severethunderstormwarningupdate_time = None
last_SVRWatch_time = None
last_SVRWatchUpdate_time = None
last_SVRWatchTrimmBack = None
last_SPCWatchCancel = None

last_SPCDayOne_time = None
last_SPCDayTwo_time = None
last_SPCMesoDisc_time = None

last_WPCMesoPrecipDisc_time = None

last_LSR_time = None

# Main loop
while True:
    # Parse RSS feed
    parsed = feedparser.parse(RSSURL)

   # Reverse the list of entries so that we process the oldest alerts first
    reversed_entries = reversed(parsed.entries)

    # Check for new alerts
    for entry in reversed_entries:
        alert_title = entry.title
        alert_time = datetime.datetime.strptime(entry.published, "%a, %d %b %Y %H:%M:%S %z")

        if 'issues Tornado Warning' in alert_title:
            if last_tornado_warning_time is None or alert_time > last_tornado_warning_time:
                handleTornadoWarning(entry)
                last_tornado_warning_time = alert_time
        elif 'updates Tornado Warning' in alert_title:
            if last_tornadowarnupdate_time is None or alert_time > last_tornadowarnupdate_time:
                handleTornadoWarningUpdate(entry)
                last_Tornadowarnupdate_time = alert_time
        elif 'issues Tornado Watch' in alert_title:
            if last_TORWatch_time is None or alert_time > last_TORWatch_time:
                handleTornadoWatch(entry)
                last_TORWatch_time = alert_time
        elif 'updates Tornado Watch' in alert_title:
            if last_TORWatchUpdate_time is None or alert_time > last_TORWatchUpdate_time:
                handleTornadoWatchUpdate(entry)
                last_TORWatchUpdate_time = alert_time
        elif 'cancels Tornado Watch' in alert_title:
            if last_TORWatchTrimmBack_time is None or alert_time > last_TORWatchTrimmBack_time:
                handleTornadoWatchTrimmBack(entry)
                last_TORWatchTrimmBack_time = alert_time
        elif 'Severe Thunderstorm Warning' in alert_title:
            if last_severe_thunderstorm_warning_time is None or alert_time > last_severe_thunderstorm_warning_time:
                handleSevereThunderstormWarning(entry)
                last_severe_thunderstorm_warning_time = alert_time
        elif 'updates Severe Thunderstorm Warning' in alert_title:
            if last_severethunderstormwarningupdate_time is None or alert_time > last_severethunderstomrwarningupdate_time:
                handleSevereThunderstormWarningUpdate(entry)
                last_severthunderstormwarningupdate_time = alert_time
        elif 'issues Severe Thunderstorm Watch' in alert_title:
            if last_SVRWatch_time is None or alert_time > last_SVRWatch_time:
                handleSevereThunderstormWatch(entry)
                last_SVRWatch_time = alert_time
        elif 'updates Severe Thunderstorm Watch' in alert_title:
            if last_SVRWatchUpdate_time is None or alert_time > last_SVRWatchUpdate_time:
                handleSevereThunderstormWatchUpdate(entry)
                last_SVRWatchUpdate_time = alert_time
        elif 'cancels Severe Thunderstorm Watch' in alert_title:
            if last_SVRWatchTrimmBack_time is None or alert_time > last_SVRWatchTrimmBack_time:
                handleSevereThunderstormWatchTrimmBack(entry)
                last_SVRWatchTrimmBack_time = alert_time
        elif 'cancels Weather Watch' in alert_title:
            if last_SPCWatchCancel_time is None or alert_time > last_SPCWatchCancel_time:
                handleWatchCanceled(entry)
                last_SPCWatchCancel_time = alert_time
        elif 'Day 1 Convective Outlook' in alert_title:
            if last_SPCDayOne_time is None or alert_time > last_SPCDayOne_time:
                handleNewDayOneOutlook(entry)
                last_SPCDayOne_time = alert_time
        elif 'Day 2 Convective Outlook' in alert_title:
            if last_SPCDayTwo_time is None or alert_time > last_SPCDayTwo_time:
                handleNewDayTwoOutlook(entry)
                last_SPCDayTwo_time = alert_time
        elif 'Mesoscale Discussion' in alert_title:
            if last_SPCMesoDisc_time is None or alert_time > last_SPCMesoDisc_time:
                handleNewSPCMesoDisc(entry)
                last_SPCMesoDisc_time = None
        elif 'Mesoscale Precipitation Discussion' in alert_title:
            if last_WPCMesoPrecipDisc_time is None or alert_time > last_WPCMesoPrecipDisc_time:
                handleNewWPCMesoPreipDisc(entry)
                last_WPCMesoPrecipDisc_time = alert_time
        elif 'reports' in alert_title:
            if last_LSR_time is None or alert_time > last_LSR_time:
                handleLSR(entry)
                last_LSR_time = alert_time

print(NewTime)
print(InitTime)

if 'Terminal Aerodrome' in Info:
  print("True!")

print(NewTime)
print(InitTime)
print(x)
if NewTime[x] < StrInitTime:
  print("True!")

ConsistentTime =

print(NewTime) 19
print(BackwardsRTList)

WarnName[9]



NewTime.__dir__()

# Suggested Changes
x = 0
parsed = feedparser.parse(RSSURL)
parsed['feed']
pprint(parsed['entries'][x]['cap_sent'])

#print(parsed.feed.entries[0].cap_event[0])
#print(parsed.feed.entries[0].cap_certainty[0])
print(parsed.entries[0].summary)

pprint(parsed['entries'][0:])

pprint(parsed['entries'][0])

pip list

Time